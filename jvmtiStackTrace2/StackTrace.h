/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class StackTrace */

#ifndef _Included_StackTrace
#define _Included_StackTrace
#ifdef __cplusplus
extern "C" {
#endif
#undef StackTrace_bbuffer_size
#define StackTrace_bbuffer_size 3200L
#undef StackTrace_ibuffer_size
#define StackTrace_ibuffer_size 800L
/*
 * Class:     StackTrace
 * Method:    startStackTrace
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_StackTrace_startStackTrace
  (JNIEnv *, jobject);

/*
 * Class:     StackTrace
 * Method:    getTopMethods
 * Signature: ()[Ljava/lang/String;
 */
JNIEXPORT jobjectArray JNICALL Java_StackTrace_getTopMethods
  (JNIEnv *, jobject);

/*
 * Class:     StackTrace
 * Method:    getCurrentThreadName
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_StackTrace_getCurrentThreadName
  (JNIEnv *, jobject);

/*
 * Class:     StackTrace
 * Method:    getThreadCount
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_StackTrace_getThreadCount
  (JNIEnv *, jobject);

/*
 * Class:     StackTrace
 * Method:    setSleepTime
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_StackTrace_setSleepTime
  (JNIEnv *, jobject, jint);

/*
 * Class:     StackTrace
 * Method:    setValues
 * Signature: (Ljava/lang/String;I)V
 */
JNIEXPORT void JNICALL Java_StackTrace_setValues
  (JNIEnv *, jobject, jstring, jint);

/*
 * Class:     StackTrace
 * Method:    setStackTraceRunning
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_StackTrace_setStackTraceRunning
  (JNIEnv *, jobject, jboolean);

/*
 * Class:     StackTrace
 * Method:    setBuffers
 * Signature: (Ljava/nio/IntBuffer;)V
 */
JNIEXPORT void JNICALL Java_StackTrace_setBuffers
  (JNIEnv *, jobject, jobject);

#ifdef __cplusplus
}
#endif
#endif
